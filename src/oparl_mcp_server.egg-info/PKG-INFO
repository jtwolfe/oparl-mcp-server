Metadata-Version: 2.4
Name: oparl-mcp-server
Version: 0.1.0
Summary: MCP Server for OParl API
Author: OParl MCP Team
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: fastmcp>=2.0.0
Requires-Dist: httpx>=0.25.0
Requires-Dist: pydantic>=2.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Dynamic: license-file

# OParl MCP Server

A Model Context Protocol (MCP) server for the OParl API, built with FastMCP. This server provides AI models with structured access to parliamentary information systems through the standardized OParl interface.

## 🚀 Features

- **Complete OParl 1.1 Support**: Access to all standard OParl object types
- **MCP Integration**: Seamless integration with AI models via Model Context Protocol
- **Flexible Configuration**: Support for multiple OParl implementations
- **Authentication**: Bearer token and API key support
- **Docker Ready**: Containerized deployment with Docker and Docker Compose
- **Comprehensive Testing**: Unit tests and integration tests included

## 📋 Supported OParl Objects

- **System**: Root system information
- **Body**: Parliamentary bodies (councils, committees)
- **Organization**: Political parties, groups, and organizations
- **Person**: Elected officials, staff, and participants
- **Meeting**: Scheduled meetings and sessions
- **AgendaItem**: Meeting agenda items and topics
- **Paper**: Documents, resolutions, and reports
- **Consultation**: Public consultations and feedback
- **File**: Attachments and media files
- **Location**: Meeting venues and addresses

## 🛠️ Installation

### Prerequisites

- Python 3.8 or higher
- pip (Python package manager)

### Quick Start

1. **Clone the repository**
   ```bash
   git clone https://github.com/your-org/oparl-mcp-server.git
   cd oparl-mcp-server
   ```

2. **Create a virtual environment**
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

3. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

4. **Run the server**
   ```bash
   python -m oparl_mcp.server
   ```

### Development Setup

For development, install additional dependencies:

```bash
pip install -r requirements-dev.txt
```

## ⚙️ Configuration

The server can be configured using environment variables or by creating a custom configuration:

### Environment Variables

```bash
export OPARL_BASE_URL="https://api.oparl.org"
export OPARL_API_KEY="your-api-key"
export OPARL_TIMEOUT="30.0"
export OPARL_LOG_LEVEL="INFO"
```

### Custom Configuration

```python
from oparl_mcp import OParlConfig, OParlMCPServer

config = OParlConfig(
    base_url="https://custom.oparl.api.com",
    api_key="your-api-key",
    timeout=60.0,
    server_name="Custom OParl Server"
)

server = OParlMCPServer(config)
server.run()
```

## 🐳 Docker Deployment

### Using Docker Compose

1. **Create environment file**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

2. **Run with Docker Compose**
   ```bash
   docker-compose -f docker/docker-compose.yml up -d
   ```

### Using Docker directly

```bash
docker build -f docker/Dockerfile -t oparl-mcp-server .
docker run -p 8000:8000 \
  -e OPARL_BASE_URL=https://api.oparl.org \
  -e OPARL_API_KEY=your-key \
  oparl-mcp-server
```

## 📖 Usage Examples

### Basic Usage

```python
from oparl_mcp import OParlMCPServer, OParlConfig

# Create server with default configuration
config = OParlConfig()
server = OParlMCPServer(config)

# Get server information
info = server.get_server_info()
print(f"Server: {info['name']}")
print(f"Features: {info['features']}")

# Run the server
server.run()
```

### Advanced Configuration

```python
from oparl_mcp import OParlMCPServer, OParlConfig

# Custom configuration
config = OParlConfig(
    base_url="https://oparl.muenchen.de",
    api_key="your-munich-api-key",
    timeout=45.0,
    server_name="Munich OParl MCP Server"
)

server = OParlMCPServer(config)
server.run()
```

## 🧪 Testing

Run the test suite:

```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=oparl_mcp

# Run specific test file
pytest tests/test_server.py
```

## 📚 API Documentation

### MCP Resources

The server exposes the following MCP resource types:

- **System Information**: Root system data and metadata
- **Body Collections**: Lists of parliamentary bodies
- **Organization Data**: Political parties and groups
- **Person Profiles**: Elected officials and staff
- **Meeting Schedules**: Upcoming and past meetings
- **Document Collections**: Papers and reports
- **Agenda Items**: Meeting topics and discussions

### MCP Tools

- **Search Operations**: Find specific data across the system
- **Filter Operations**: Filter data by various criteria
- **Export Operations**: Export data in different formats
- **Validation Operations**: Validate data integrity

## 🔧 Development

### Project Structure

```
oparl-mcp-server/
├── src/oparl_mcp/          # Main source code
│   ├── __init__.py
│   ├── server.py           # MCP server implementation
│   ├── config.py           # Configuration management
│   ├── auth.py             # Authentication handling
│   └── utils.py            # Utility functions
├── tests/                  # Test suite
├── examples/               # Usage examples
├── docker/                 # Docker configuration
├── docs/                   # Documentation
├── oparl_openapi.json      # OpenAPI specification
└── requirements.txt        # Dependencies
```

### Adding New Features

1. **Create a feature branch**
   ```bash
   git checkout -b feature/new-feature
   ```

2. **Make your changes**
   - Add tests for new functionality
   - Update documentation
   - Follow the existing code style

3. **Run tests**
   ```bash
   pytest
   ```

4. **Submit a pull request**

## 🌍 OParl Implementations

This server works with various OParl implementations:

- **Generic OParl API**: `https://api.oparl.org`
- **Munich City Council**: `https://oparl.muenchen.de`
- **Cologne City Council**: `https://oparl.koeln.de`
- **Hamburg Parliament**: `https://oparl.hamburg.de`

Each implementation may have different:
- Authentication requirements
- Available data
- API endpoints
- Rate limits

## 🤝 Contributing

We welcome contributions! Please see our [Contributing Guidelines](CONTRIBUTING.md) for details.

### Development Setup

1. Fork the repository
2. Create a feature branch
3. Install development dependencies: `pip install -r requirements-dev.txt`
4. Make your changes
5. Add tests
6. Run the test suite: `pytest`
7. Submit a pull request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- [OParl Initiative](https://dev.oparl.org) for the standardized API specification
- [FastMCP](https://gofastmcp.com) for the excellent MCP framework
- The open-source community for inspiration and support

## 📞 Support

- **Documentation**: [Project Wiki](https://github.com/your-org/oparl-mcp-server/wiki)
- **Issues**: [GitHub Issues](https://github.com/your-org/oparl-mcp-server/issues)
- **Discussions**: [GitHub Discussions](https://github.com/your-org/oparl-mcp-server/discussions)

## 🔗 Related Projects

- [OParl Specification](https://dev.oparl.org/spezifikation)
- [FastMCP Framework](https://gofastmcp.com)
- [Model Context Protocol](https://modelcontextprotocol.io)

---

**Made with ❤️ for open government and AI accessibility**
