{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OParl MCP Server","text":"<p>A Model Context Protocol (MCP) server for the OParl API, built with FastMCP. This server provides AI models with structured access to parliamentary information systems through the standardized OParl interface.</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Complete OParl 1.1 Support: Access to all standard OParl object types</li> <li>MCP Integration: Seamless integration with AI models via Model Context Protocol</li> <li>Flexible Configuration: Support for multiple OParl implementations</li> <li>Authentication: Bearer token and API key support</li> <li>Docker Ready: Containerized deployment with Docker and Docker Compose</li> <li>Comprehensive Testing: Unit tests and integration tests included</li> </ul>"},{"location":"#supported-oparl-objects","title":"\ud83d\udccb Supported OParl Objects","text":"<ul> <li>System: Root system information</li> <li>Body: Parliamentary bodies (councils, committees)</li> <li>Organization: Political parties, groups, and organizations</li> <li>Person: Elected officials, staff, and participants</li> <li>Meeting: Scheduled meetings and sessions</li> <li>AgendaItem: Meeting agenda items and topics</li> <li>Paper: Documents, resolutions, and reports</li> <li>Consultation: Public consultations and feedback</li> <li>File: Attachments and media files</li> <li>Location: Meeting venues and addresses</li> </ul>"},{"location":"#quick-start","title":"\ud83d\udee0\ufe0f Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install oparl-mcp-server\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from oparl_mcp import OParlMCPServer, OParlConfig\n\n# Create server with default configuration\nconfig = OParlConfig()\nserver = OParlMCPServer(config)\n\n# Run the server\nserver.run()\n</code></pre>"},{"location":"#docker-usage","title":"Docker Usage","text":"<pre><code>docker run -p 8000:8000 oparl-mcp-server:latest\n</code></pre>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Installation Guide</li> <li>Configuration</li> <li>API Reference</li> <li>Examples</li> </ul>"},{"location":"#oparl-implementations","title":"\ud83c\udf0d OParl Implementations","text":"<p>This server works with various OParl implementations:</p> <ul> <li>Generic OParl API: <code>https://api.oparl.org</code></li> <li>Munich City Council: <code>https://oparl.muenchen.de</code></li> <li>Cologne City Council: <code>https://oparl.koeln.de</code></li> <li>Hamburg Parliament: <code>https://oparl.hamburg.de</code></li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p> <p>Made with \u2764\ufe0f for open government and AI accessibility</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to OParl MCP Server will be documented in this file.</p>"},{"location":"about/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Initial release</li> <li>OParl 1.1 specification support</li> <li>MCP server implementation</li> <li>Docker support</li> <li>Comprehensive documentation</li> <li>CI/CD pipeline</li> </ul>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>N/A</li> </ul>"},{"location":"about/changelog/#fixed","title":"Fixed","text":"<ul> <li>N/A</li> </ul>"},{"location":"about/changelog/#010-2024-01-15","title":"[0.1.0] - 2024-01-15","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>Initial release of OParl MCP Server</li> <li>Support for all OParl 1.1 object types</li> <li>FastMCP integration</li> <li>Docker containerization</li> <li>Comprehensive test suite</li> <li>Multi-language documentation (English/German)</li> <li>GitHub Actions CI/CD pipeline</li> <li>Security scanning and code quality checks</li> <li>Docker Compose configuration</li> <li>Example usage scripts</li> </ul>"},{"location":"about/changelog/#features","title":"Features","text":"<ul> <li>OParl API Integration: Complete support for OParl 1.1 specification</li> <li>MCP Server: Model Context Protocol server for AI model integration</li> <li>Authentication: Bearer token and API key support</li> <li>Configuration: Flexible configuration via environment variables</li> <li>Docker Support: Containerized deployment with Docker and Docker Compose</li> <li>Documentation: Comprehensive documentation in English and German</li> <li>Testing: Unit tests, integration tests, and security scanning</li> <li>CI/CD: Automated testing, building, and deployment pipeline</li> </ul>"},{"location":"about/changelog/#technical-details","title":"Technical Details","text":"<ul> <li>Python: 3.8+ support</li> <li>Dependencies: FastMCP, httpx, pydantic</li> <li>Container: Multi-architecture Docker images</li> <li>Documentation: MkDocs with Material theme</li> <li>Testing: pytest with coverage reporting</li> <li>Security: Bandit, Safety, Trivy, CodeQL scanning</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2024 OParl MCP Team</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/license/#third-party-licenses","title":"Third-Party Licenses","text":"<p>This project uses the following third-party libraries:</p> <ul> <li>FastMCP: MIT License</li> <li>httpx: BSD License</li> <li>pydantic: MIT License</li> <li>MkDocs Material: MIT License</li> </ul>"},{"location":"about/license/#oparl-specification","title":"OParl Specification","text":"<p>This project implements the OParl 1.1 specification, which is available under the Creative Commons Attribution 4.0 International License.</p>"},{"location":"about/license/#contributing","title":"Contributing","text":"<p>By contributing to this project, you agree that your contributions will be licensed under the MIT License.</p>"},{"location":"api/configuration/","title":"Configuration API Reference","text":"<p>Configuration options for OParl MCP Server.</p>"},{"location":"api/configuration/#environment-variables","title":"Environment Variables","text":"Variable Default Description <code>OPARL_BASE_URL</code> <code>https://api.oparl.org</code> Base URL of the OParl API <code>OPARL_API_KEY</code> <code>None</code> API key for authentication <code>OPARL_TIMEOUT</code> <code>30.0</code> Request timeout in seconds <code>OPARL_LOG_LEVEL</code> <code>INFO</code> Logging level <code>OPARL_SERVER_NAME</code> <code>OParl MCP Server</code> Server name <code>OPARL_SERVER_VERSION</code> <code>0.1.0</code> Server version"},{"location":"api/configuration/#configuration-file","title":"Configuration File","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>OPARL_BASE_URL=https://oparl.muenchen.de\nOPARL_API_KEY=your-munich-api-key\nOPARL_TIMEOUT=45.0\nOPARL_LOG_LEVEL=INFO\nOPARL_SERVER_NAME=Munich OParl Server\n</code></pre>"},{"location":"api/configuration/#programmatic-configuration","title":"Programmatic Configuration","text":"<pre><code>from oparl_mcp import OParlConfig\n\nconfig = OParlConfig(\n    base_url=\"https://custom.oparl.api.com\",\n    api_key=\"your-api-key\",\n    timeout=60.0,\n    server_name=\"Custom OParl Server\",\n    log_level=\"DEBUG\"\n)\n</code></pre>"},{"location":"api/configuration/#logging-configuration","title":"Logging Configuration","text":"<pre><code>import logging\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n</code></pre>"},{"location":"api/configuration/#docker-configuration","title":"Docker Configuration","text":"<pre><code>version: '3.8'\nservices:\n  oparl-mcp-server:\n    image: oparl-mcp-server:latest\n    environment:\n      - OPARL_BASE_URL=https://oparl.muenchen.de\n      - OPARL_API_KEY=your-key\n      - OPARL_TIMEOUT=60.0\n      - OPARL_LOG_LEVEL=INFO\n</code></pre>"},{"location":"api/server/","title":"Server API Reference","text":"<p>API reference for the OParl MCP Server.</p>"},{"location":"api/server/#oparlmcpserver","title":"OParlMCPServer","text":"<p>Main server class for the OParl MCP Server.</p>"},{"location":"api/server/#constructor","title":"Constructor","text":"<pre><code>OParlMCPServer(config: Optional[OParlConfig] = None)\n</code></pre> <p>Parameters: - <code>config</code> (Optional[OParlConfig]): Configuration object. If None, uses default configuration.</p>"},{"location":"api/server/#methods","title":"Methods","text":""},{"location":"api/server/#run","title":"<code>run()</code>","text":"<p>Start the MCP server.</p> <pre><code>server.run()\n</code></pre>"},{"location":"api/server/#get_server_info-dict","title":"<code>get_server_info() -&gt; dict</code>","text":"<p>Get information about the MCP server.</p> <p>Returns: - <code>dict</code>: Server information including name, version, base URL, and features.</p> <p>Example: <pre><code>info = server.get_server_info()\nprint(f\"Server: {info['name']}\")\nprint(f\"Version: {info['version']}\")\nprint(f\"Features: {info['features']}\")\n</code></pre></p>"},{"location":"api/server/#oparlconfig","title":"OParlConfig","text":"<p>Configuration class for OParl MCP Server.</p>"},{"location":"api/server/#constructor_1","title":"Constructor","text":"<pre><code>OParlConfig(\n    base_url: str = \"https://api.oparl.org\",\n    api_key: Optional[str] = None,\n    timeout: float = 30.0,\n    server_name: str = \"OParl MCP Server\",\n    server_version: str = \"0.1.0\",\n    log_level: str = \"INFO\"\n)\n</code></pre> <p>Parameters: - <code>base_url</code> (str): Base URL of the OParl API - <code>api_key</code> (Optional[str]): API key for authentication - <code>timeout</code> (float): Request timeout in seconds - <code>server_name</code> (str): Server name - <code>server_version</code> (str): Server version - <code>log_level</code> (str): Logging level</p>"},{"location":"api/server/#environment-variables","title":"Environment Variables","text":"<p>The configuration can be loaded from environment variables with the <code>OPARL_</code> prefix:</p> <ul> <li><code>OPARL_BASE_URL</code>: Base URL of the OParl API</li> <li><code>OPARL_API_KEY</code>: API key for authentication</li> <li><code>OPARL_TIMEOUT</code>: Request timeout in seconds</li> <li><code>OPARL_LOG_LEVEL</code>: Logging level</li> <li><code>OPARL_SERVER_NAME</code>: Server name</li> <li><code>OPARL_SERVER_VERSION</code>: Server version</li> </ul>"},{"location":"api/server/#oparlauthenticator","title":"OParlAuthenticator","text":"<p>Authentication handler for OParl API.</p>"},{"location":"api/server/#constructor_2","title":"Constructor","text":"<pre><code>OParlAuthenticator(api_key: Optional[str] = None)\n</code></pre> <p>Parameters: - <code>api_key</code> (Optional[str]): API key for authentication (optional).</p>"},{"location":"api/server/#methods_1","title":"Methods","text":""},{"location":"api/server/#get_auth_headers-dictstr-str","title":"<code>get_auth_headers() -&gt; Dict[str, str]</code>","text":"<p>Get authentication headers for API requests.</p> <p>Returns: - <code>Dict[str, str]</code>: Dictionary containing authentication headers.</p>"},{"location":"api/server/#set_tokentoken-str-none","title":"<code>set_token(token: str) -&gt; None</code>","text":"<p>Set authentication token.</p> <p>Parameters: - <code>token</code> (str): Authentication token.</p>"},{"location":"api/server/#is_authenticated-bool","title":"<code>is_authenticated() -&gt; bool</code>","text":"<p>Check if authenticator has valid credentials.</p> <p>Returns: - <code>bool</code>: True if authenticated, False otherwise.</p>"},{"location":"api/server/#utility-functions","title":"Utility Functions","text":""},{"location":"api/server/#format_oparl_datedate_obj-optionalany-optionalstr","title":"<code>format_oparl_date(date_obj: Optional[Any]) -&gt; Optional[str]</code>","text":"<p>Format date object for OParl API.</p> <p>Parameters: - <code>date_obj</code> (Optional[Any]): Date object to format.</p> <p>Returns: - <code>Optional[str]</code>: Formatted date string or None.</p>"},{"location":"api/server/#build_query_paramskwargs-dictstr-any","title":"<code>build_query_params(**kwargs) -&gt; Dict[str, Any]</code>","text":"<p>Build query parameters for OParl API requests.</p> <p>Parameters: - <code>**kwargs</code>: Query parameters including limit, offset, search, start_date, end_date.</p> <p>Returns: - <code>Dict[str, Any]</code>: Dictionary of query parameters.</p>"},{"location":"api/server/#validate_oparl_urlurl-str-base_url-str-bool","title":"<code>validate_oparl_url(url: str, base_url: str) -&gt; bool</code>","text":"<p>Validate if URL is a valid OParl resource URL.</p> <p>Parameters: - <code>url</code> (str): URL to validate. - <code>base_url</code> (str): Base URL of the OParl API.</p> <p>Returns: - <code>bool</code>: True if URL is valid, False otherwise.</p>"},{"location":"api/server/#create_oparl_summarydata-dictstr-any-str","title":"<code>create_oparl_summary(data: Dict[str, Any]) -&gt; str</code>","text":"<p>Create a human-readable summary of OParl data.</p> <p>Parameters: - <code>data</code> (Dict[str, Any]): OParl data object.</p> <p>Returns: - <code>str</code>: Summary string.</p>"},{"location":"api/utilities/","title":"Utilities API Reference","text":"<p>Utility functions for OParl MCP Server.</p>"},{"location":"api/utilities/#date-formatting","title":"Date Formatting","text":""},{"location":"api/utilities/#format_oparl_datedate_obj-optionalany-optionalstr","title":"<code>format_oparl_date(date_obj: Optional[Any]) -&gt; Optional[str]</code>","text":"<p>Format date object for OParl API.</p> <p>Parameters: - <code>date_obj</code> (Optional[Any]): Date object to format.</p> <p>Returns: - <code>Optional[str]</code>: Formatted date string or None.</p> <p>Example: <pre><code>from oparl_mcp.utils import format_oparl_date\nfrom datetime import datetime\n\ndate_str = format_oparl_date(datetime.now())\nprint(date_str)  # \"2024-01-15T10:30:00Z\"\n</code></pre></p>"},{"location":"api/utilities/#query-parameters","title":"Query Parameters","text":""},{"location":"api/utilities/#build_query_paramskwargs-dictstr-any","title":"<code>build_query_params(**kwargs) -&gt; Dict[str, Any]</code>","text":"<p>Build query parameters for OParl API requests.</p> <p>Parameters: - <code>**kwargs</code>: Query parameters including limit, offset, search, start_date, end_date.</p> <p>Returns: - <code>Dict[str, Any]</code>: Dictionary of query parameters.</p> <p>Example: <pre><code>from oparl_mcp.utils import build_query_params\n\nparams = build_query_params(\n    limit=10,\n    offset=0,\n    search=\"budget\",\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\"\n)\nprint(params)  # {\"limit\": 10, \"offset\": 0, \"search\": \"budget\", ...}\n</code></pre></p>"},{"location":"api/utilities/#url-validation","title":"URL Validation","text":""},{"location":"api/utilities/#validate_oparl_urlurl-str-base_url-str-bool","title":"<code>validate_oparl_url(url: str, base_url: str) -&gt; bool</code>","text":"<p>Validate if URL is a valid OParl resource URL.</p> <p>Parameters: - <code>url</code> (str): URL to validate. - <code>base_url</code> (str): Base URL of the OParl API.</p> <p>Returns: - <code>bool</code>: True if URL is valid, False otherwise.</p> <p>Example: <pre><code>from oparl_mcp.utils import validate_oparl_url\n\nis_valid = validate_oparl_url(\n    \"https://api.oparl.org/body/1\",\n    \"https://api.oparl.org\"\n)\nprint(is_valid)  # True\n</code></pre></p>"},{"location":"api/utilities/#data-summarization","title":"Data Summarization","text":""},{"location":"api/utilities/#create_oparl_summarydata-dictstr-any-str","title":"<code>create_oparl_summary(data: Dict[str, Any]) -&gt; str</code>","text":"<p>Create a human-readable summary of OParl data.</p> <p>Parameters: - <code>data</code> (Dict[str, Any]): OParl data object.</p> <p>Returns: - <code>str</code>: Summary string.</p> <p>Example: <pre><code>from oparl_mcp.utils import create_oparl_summary\n\nmeeting_data = {\n    \"name\": \"City Council Meeting\",\n    \"start\": \"2024-01-15T18:00:00Z\",\n    \"location\": {\"name\": \"City Hall\"}\n}\n\nsummary = create_oparl_summary(meeting_data)\nprint(summary)  # \"City Council Meeting on 2024-01-15 at City Hall\"\n</code></pre></p>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to OParl MCP Server!</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository</li> <li>Clone your fork locally</li> <li>Create a virtual environment</li> <li>Install development dependencies</li> </ol> <pre><code>git clone https://github.com/your-username/oparl-mcp-server.git\ncd oparl-mcp-server\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -r requirements-dev.txt\npip install -e .\n</code></pre>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>Git</li> <li>Docker (optional)</li> </ul>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>We use Black for code formatting and isort for import sorting:</p> <pre><code>black src/ tests/ examples/\nisort src/ tests/ examples/\n</code></pre>"},{"location":"development/contributing/#type-checking","title":"Type Checking","text":"<p>We use mypy for type checking:</p> <pre><code>mypy src/\n</code></pre>"},{"location":"development/contributing/#testing","title":"Testing","text":"<p>Run the test suite:</p> <pre><code>pytest tests/\n</code></pre>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a feature branch from <code>dev</code></li> <li>Make your changes</li> <li>Add tests for new functionality</li> <li>Ensure all tests pass</li> <li>Update documentation if needed</li> <li>Submit a pull request</li> </ol>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful and constructive in all interactions.</p>"},{"location":"development/contributing/#questions","title":"Questions?","text":"<p>Feel free to open an issue for questions or discussions.</p>"},{"location":"development/deployment/","title":"Deployment","text":"<p>Deployment options and guidelines for OParl MCP Server.</p>"},{"location":"development/deployment/#docker-deployment","title":"Docker Deployment","text":""},{"location":"development/deployment/#build-image","title":"Build Image","text":"<pre><code>docker build -f docker/Dockerfile -t oparl-mcp-server .\n</code></pre>"},{"location":"development/deployment/#run-container","title":"Run Container","text":"<pre><code>docker run -p 8000:8000 oparl-mcp-server\n</code></pre>"},{"location":"development/deployment/#with-environment-variables","title":"With Environment Variables","text":"<pre><code>docker run -p 8000:8000 \\\n  -e OPARL_BASE_URL=https://oparl.muenchen.de \\\n  -e OPARL_API_KEY=your-key \\\n  oparl-mcp-server\n</code></pre>"},{"location":"development/deployment/#docker-compose","title":"Docker Compose","text":"<pre><code>version: '3.8'\nservices:\n  oparl-mcp-server:\n    image: oparl-mcp-server:latest\n    ports:\n      - \"8000:8000\"\n    environment:\n      - OPARL_BASE_URL=https://oparl.muenchen.de\n      - OPARL_API_KEY=your-key\n      - OPARL_TIMEOUT=60.0\n    restart: unless-stopped\n</code></pre>"},{"location":"development/deployment/#production-deployment","title":"Production Deployment","text":""},{"location":"development/deployment/#environment-setup","title":"Environment Setup","text":"<pre><code># Create production environment\npython -m venv venv\nsource venv/bin/activate\npip install oparl-mcp-server\n</code></pre>"},{"location":"development/deployment/#configuration","title":"Configuration","text":"<p>Create production configuration:</p> <pre><code>OPARL_BASE_URL=https://api.oparl.org\nOPARL_API_KEY=your-production-key\nOPARL_TIMEOUT=60.0\nOPARL_LOG_LEVEL=INFO\nOPARL_SERVER_NAME=Production OParl Server\n</code></pre>"},{"location":"development/deployment/#process-management","title":"Process Management","text":"<p>Use systemd or similar for process management:</p> <pre><code>[Unit]\nDescription=OParl MCP Server\nAfter=network.target\n\n[Service]\nType=simple\nUser=oparl\nWorkingDirectory=/opt/oparl-mcp-server\nEnvironment=PATH=/opt/oparl-mcp-server/venv/bin\nExecStart=/opt/oparl-mcp-server/venv/bin/python -m oparl_mcp\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"development/deployment/#cloud-deployment","title":"Cloud Deployment","text":""},{"location":"development/deployment/#aws-ecs","title":"AWS ECS","text":"<ul> <li>Use the provided Dockerfile</li> <li>Configure environment variables</li> <li>Set up load balancing if needed</li> </ul>"},{"location":"development/deployment/#google-cloud-run","title":"Google Cloud Run","text":"<ul> <li>Deploy as containerized service</li> <li>Configure environment variables</li> <li>Set up monitoring</li> </ul>"},{"location":"development/deployment/#azure-container-instances","title":"Azure Container Instances","text":"<ul> <li>Deploy using Azure CLI</li> <li>Configure environment variables</li> <li>Set up logging</li> </ul>"},{"location":"development/deployment/#monitoring","title":"Monitoring","text":""},{"location":"development/deployment/#health-checks","title":"Health Checks","text":"<p>The server provides health check endpoints: - <code>/health</code> - Basic health status - <code>/metrics</code> - Performance metrics</p>"},{"location":"development/deployment/#logging","title":"Logging","text":"<p>Configure structured logging:</p> <pre><code>import logging\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n</code></pre>"},{"location":"development/deployment/#security-considerations","title":"Security Considerations","text":"<ul> <li>Use HTTPS in production</li> <li>Secure API keys and secrets</li> <li>Regular security updates</li> <li>Network isolation</li> <li>Access controls</li> </ul>"},{"location":"development/testing/","title":"Testing","text":"<p>Testing guidelines and practices for OParl MCP Server.</p>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#unit-tests","title":"Unit Tests","text":"<pre><code>pytest tests/\n</code></pre>"},{"location":"development/testing/#with-coverage","title":"With Coverage","text":"<pre><code>pytest tests/ --cov=oparl_mcp --cov-report=html\n</code></pre>"},{"location":"development/testing/#specific-test-file","title":"Specific Test File","text":"<pre><code>pytest tests/test_config.py\n</code></pre>"},{"location":"development/testing/#verbose-output","title":"Verbose Output","text":"<pre><code>pytest tests/ -v\n</code></pre>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 test_config.py      # Configuration tests\n\u251c\u2500\u2500 test_server.py      # Server tests\n\u251c\u2500\u2500 test_auth.py        # Authentication tests\n\u2514\u2500\u2500 test_utils.py       # Utility function tests\n</code></pre>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/testing/#test-configuration","title":"Test Configuration","text":"<pre><code>import pytest\nfrom oparl_mcp import OParlConfig\n\ndef test_default_config():\n    config = OParlConfig()\n    assert config.base_url == \"https://api.oparl.org\"\n    assert config.timeout == 30.0\n</code></pre>"},{"location":"development/testing/#test-server","title":"Test Server","text":"<pre><code>import pytest\nfrom oparl_mcp import OParlMCPServer, OParlConfig\n\ndef test_server_initialization():\n    config = OParlConfig()\n    server = OParlMCPServer(config)\n    assert server is not None\n</code></pre>"},{"location":"development/testing/#test-with-mocking","title":"Test with Mocking","text":"<pre><code>from unittest.mock import patch, MagicMock\n\n@patch('oparl_mcp.server.httpx.AsyncClient')\ndef test_api_call(mock_client):\n    mock_response = MagicMock()\n    mock_response.json.return_value = {\"data\": \"test\"}\n    mock_client.return_value.__aenter__.return_value.get.return_value = mock_response\n\n    # Test your code here\n</code></pre>"},{"location":"development/testing/#continuous-integration","title":"Continuous Integration","text":"<p>Tests run automatically on: - Push to any branch - Pull requests - Multiple Python versions (3.8, 3.9, 3.10, 3.11, 3.12, 3.13)</p>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>We aim for high test coverage. Current coverage can be viewed by running:</p> <pre><code>pytest tests/ --cov=oparl_mcp --cov-report=html\nopen htmlcov/index.html\n</code></pre>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Configure OParl MCP Server for your specific needs.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"Variable Default Description <code>OPARL_BASE_URL</code> <code>https://api.oparl.org</code> Base URL of the OParl API <code>OPARL_API_KEY</code> <code>None</code> API key for authentication <code>OPARL_TIMEOUT</code> <code>30.0</code> Request timeout in seconds <code>OPARL_LOG_LEVEL</code> <code>INFO</code> Logging level <code>OPARL_SERVER_NAME</code> <code>OParl MCP Server</code> Server name <code>OPARL_SERVER_VERSION</code> <code>0.1.0</code> Server version"},{"location":"getting-started/configuration/#programmatic-configuration","title":"Programmatic Configuration","text":"<pre><code>from oparl_mcp import OParlConfig, OParlMCPServer\n\nconfig = OParlConfig(\n    base_url=\"https://custom.oparl.api.com\",\n    api_key=\"your-api-key\",\n    timeout=60.0,\n    server_name=\"Custom OParl Server\",\n    log_level=\"DEBUG\"\n)\n\nserver = OParlMCPServer(config)\nserver.run()\n</code></pre>"},{"location":"getting-started/configuration/#configuration-file","title":"Configuration File","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>OPARL_BASE_URL=https://oparl.muenchen.de\nOPARL_API_KEY=your-munich-api-key\nOPARL_TIMEOUT=45.0\nOPARL_LOG_LEVEL=INFO\n</code></pre>"},{"location":"getting-started/configuration/#multiple-oparl-implementations","title":"Multiple OParl Implementations","text":"<p>The server supports various OParl implementations:</p> <ul> <li>Generic OParl API: <code>https://api.oparl.org</code></li> <li>Munich City Council: <code>https://oparl.muenchen.de</code></li> <li>Cologne City Council: <code>https://oparl.koeln.de</code></li> <li>Hamburg Parliament: <code>https://oparl.hamburg.de</code></li> </ul> <p>Each implementation may have different: - Authentication requirements - Available data - API endpoints - Rate limits</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package manager)</li> </ul>"},{"location":"getting-started/installation/#quick-installation","title":"Quick Installation","text":""},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<pre><code>pip install oparl-mcp-server\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From source","text":"<pre><code>git clone https://github.com/oparl-mcp-team/oparl-mcp-server.git\ncd oparl-mcp-server\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#docker-installation","title":"Docker Installation","text":""},{"location":"getting-started/installation/#using-docker-hub","title":"Using Docker Hub","text":"<pre><code>docker pull oparl-mcp-team/oparl-mcp-server:latest\n</code></pre>"},{"location":"getting-started/installation/#using-github-container-registry","title":"Using GitHub Container Registry","text":"<pre><code>docker pull ghcr.io/oparl-mcp-team/oparl-mcp-server:latest\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For development, install additional dependencies:</p> <pre><code>git clone https://github.com/oparl-mcp-team/oparl-mcp-server.git\ncd oparl-mcp-server\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -r requirements.txt\npip install -r requirements-dev.txt\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>Test your installation:</p> <pre><code>python -c \"from oparl_mcp import OParlMCPServer; print('Installation successful!')\"\n</code></pre> <p>Or run the test script:</p> <pre><code>python test_setup.py\n</code></pre>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>Get up and running with OParl MCP Server in minutes.</p>"},{"location":"getting-started/quickstart/#installation","title":"Installation","text":"<pre><code>pip install oparl-mcp-server\n</code></pre>"},{"location":"getting-started/quickstart/#basic-usage","title":"Basic Usage","text":"<pre><code>from oparl_mcp import OParlMCPServer, OParlConfig\n\n# Create server with default configuration\nconfig = OParlConfig()\nserver = OParlMCPServer(config)\n\n# Run the server\nserver.run()\n</code></pre>"},{"location":"getting-started/quickstart/#docker-usage","title":"Docker Usage","text":"<pre><code>docker run -p 8000:8000 oparl-mcp-server:latest\n</code></pre>"},{"location":"getting-started/quickstart/#configuration","title":"Configuration","text":"<p>Set environment variables for custom configuration:</p> <pre><code>export OPARL_BASE_URL=\"https://api.oparl.org\"\nexport OPARL_API_KEY=\"your-api-key\"\nexport OPARL_TIMEOUT=\"30.0\"\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Guide</li> <li>User Guide</li> <li>API Reference</li> </ul>"},{"location":"user-guide/examples/","title":"Examples","text":"<p>Practical examples of using OParl MCP Server.</p>"},{"location":"user-guide/examples/#basic-server-setup","title":"Basic Server Setup","text":"<pre><code>from oparl_mcp import OParlMCPServer, OParlConfig\n\n# Default configuration\nconfig = OParlConfig()\nserver = OParlMCPServer(config)\nserver.run()\n</code></pre>"},{"location":"user-guide/examples/#custom-configuration","title":"Custom Configuration","text":"<pre><code>from oparl_mcp import OParlMCPServer, OParlConfig\n\n# Custom configuration\nconfig = OParlConfig(\n    base_url=\"https://oparl.muenchen.de\",\n    api_key=\"your-api-key\",\n    timeout=60.0,\n    server_name=\"Munich OParl Server\"\n)\n\nserver = OParlMCPServer(config)\nserver.run()\n</code></pre>"},{"location":"user-guide/examples/#docker-usage","title":"Docker Usage","text":"<pre><code># Run with default configuration\ndocker run -p 8000:8000 oparl-mcp-server:latest\n\n# Run with custom configuration\ndocker run -p 8000:8000 \\\n  -e OPARL_BASE_URL=https://oparl.muenchen.de \\\n  -e OPARL_API_KEY=your-key \\\n  oparl-mcp-server:latest\n</code></pre>"},{"location":"user-guide/examples/#docker-compose","title":"Docker Compose","text":"<pre><code>version: '3.8'\nservices:\n  oparl-mcp-server:\n    image: oparl-mcp-server:latest\n    ports:\n      - \"8000:8000\"\n    environment:\n      - OPARL_BASE_URL=https://oparl.muenchen.de\n      - OPARL_API_KEY=your-key\n      - OPARL_TIMEOUT=60.0\n</code></pre>"},{"location":"user-guide/examples/#mcp-client-usage","title":"MCP Client Usage","text":"<pre><code>import asyncio\nfrom fastmcp import Client\n\nasync def main():\n    async with Client(\"http://localhost:8000\") as client:\n        # Get system information\n        system = await client.get_resource(\"system\")\n        print(f\"System: {system['name']}\")\n\n        # Get list of bodies\n        bodies = await client.get_resource(\"body\", {\"limit\": 5})\n        print(f\"Found {len(bodies['data'])} bodies\")\n\n        # Get specific meeting\n        meeting = await client.get_resource_template(\n            \"meeting\", \n            {\"meetingId\": \"123\"}\n        )\n        print(f\"Meeting: {meeting['name']}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"user-guide/examples/#error-handling","title":"Error Handling","text":"<pre><code>from oparl_mcp import OParlMCPServer, OParlConfig\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\ntry:\n    config = OParlConfig()\n    server = OParlMCPServer(config)\n    server.run()\nexcept KeyboardInterrupt:\n    print(\"Server stopped by user\")\nexcept Exception as e:\n    print(f\"Server error: {e}\")\n    raise\n</code></pre>"},{"location":"user-guide/examples/#environment-configuration","title":"Environment Configuration","text":"<pre><code># .env file\nOPARL_BASE_URL=https://oparl.muenchen.de\nOPARL_API_KEY=your-munich-api-key\nOPARL_TIMEOUT=45.0\nOPARL_LOG_LEVEL=DEBUG\nOPARL_SERVER_NAME=Munich OParl MCP Server\n</code></pre>"},{"location":"user-guide/examples/#production-deployment","title":"Production Deployment","text":"<pre><code># Build Docker image\ndocker build -f docker/Dockerfile -t oparl-mcp-server .\n\n# Run with production settings\ndocker run -d \\\n  --name oparl-mcp-server \\\n  -p 8000:8000 \\\n  -e OPARL_BASE_URL=https://api.oparl.org \\\n  -e OPARL_LOG_LEVEL=INFO \\\n  --restart unless-stopped \\\n  oparl-mcp-server:latest\n</code></pre>"},{"location":"user-guide/mcp-components/","title":"MCP Components","text":"<p>Understanding the Model Context Protocol components provided by OParl MCP Server.</p>"},{"location":"user-guide/mcp-components/#resources","title":"Resources","text":"<p>Resources provide read-only access to data collections.</p>"},{"location":"user-guide/mcp-components/#system-information","title":"System Information","text":"<ul> <li>Endpoint: <code>/system</code></li> <li>Description: Root system information and metadata</li> <li>Type: Resource</li> </ul>"},{"location":"user-guide/mcp-components/#body-collections","title":"Body Collections","text":"<ul> <li>Endpoint: <code>/body</code></li> <li>Description: Lists of parliamentary bodies</li> <li>Type: Resource</li> <li>Parameters: <code>limit</code>, <code>offset</code></li> </ul>"},{"location":"user-guide/mcp-components/#organization-data","title":"Organization Data","text":"<ul> <li>Endpoint: <code>/body/{bodyId}/organization</code></li> <li>Description: Political parties and groups</li> <li>Type: Resource</li> <li>Parameters: <code>limit</code>, <code>offset</code></li> </ul>"},{"location":"user-guide/mcp-components/#person-profiles","title":"Person Profiles","text":"<ul> <li>Endpoint: <code>/body/{bodyId}/person</code></li> <li>Description: Elected officials and staff</li> <li>Type: Resource</li> <li>Parameters: <code>limit</code>, <code>offset</code></li> </ul>"},{"location":"user-guide/mcp-components/#meeting-schedules","title":"Meeting Schedules","text":"<ul> <li>Endpoint: <code>/body/{bodyId}/meeting</code></li> <li>Description: Upcoming and past meetings</li> <li>Type: Resource</li> <li>Parameters: <code>limit</code>, <code>offset</code>, <code>start</code>, <code>end</code></li> </ul>"},{"location":"user-guide/mcp-components/#document-collections","title":"Document Collections","text":"<ul> <li>Endpoint: <code>/body/{bodyId}/paper</code></li> <li>Description: Papers and reports</li> <li>Type: Resource</li> <li>Parameters: <code>limit</code>, <code>offset</code>, <code>search</code></li> </ul>"},{"location":"user-guide/mcp-components/#resource-templates","title":"Resource Templates","text":"<p>Resource templates provide parameterized access to individual items.</p>"},{"location":"user-guide/mcp-components/#individual-items","title":"Individual Items","text":"<ul> <li>Meeting Details: <code>/meeting/{meetingId}</code></li> <li>Person Profile: <code>/person/{personId}</code></li> <li>Organization Details: <code>/organization/{organizationId}</code></li> <li>Document Access: <code>/paper/{paperId}</code></li> </ul>"},{"location":"user-guide/mcp-components/#tools","title":"Tools","text":"<p>Tools provide functionality for actions and operations.</p>"},{"location":"user-guide/mcp-components/#search-operations","title":"Search Operations","text":"<ul> <li>Find specific data across the system</li> <li>Filter by various criteria</li> <li>Advanced query capabilities</li> </ul>"},{"location":"user-guide/mcp-components/#data-operations","title":"Data Operations","text":"<ul> <li>Export data in different formats</li> <li>Validate data integrity</li> <li>Transform data structures</li> </ul>"},{"location":"user-guide/mcp-components/#usage-examples","title":"Usage Examples","text":""},{"location":"user-guide/mcp-components/#accessing-a-resource","title":"Accessing a Resource","text":"<pre><code># Get system information\nsystem_info = await client.get_resource(\"system\")\n\n# Get list of bodies\nbodies = await client.get_resource(\"body\", {\"limit\": 10})\n</code></pre>"},{"location":"user-guide/mcp-components/#using-resource-templates","title":"Using Resource Templates","text":"<pre><code># Get specific meeting\nmeeting = await client.get_resource_template(\"meeting\", {\"meetingId\": \"123\"})\n\n# Get specific person\nperson = await client.get_resource_template(\"person\", {\"personId\": \"456\"})\n</code></pre>"},{"location":"user-guide/mcp-components/#using-tools","title":"Using Tools","text":"<pre><code># Search for documents\nresults = await client.call_tool(\"search_papers\", {\"query\": \"budget\"})\n\n# Export data\nexport = await client.call_tool(\"export_meetings\", {\"format\": \"json\"})\n</code></pre>"},{"location":"user-guide/oparl-objects/","title":"OParl Objects","text":"<p>Understanding the OParl object types supported by the MCP server.</p>"},{"location":"user-guide/oparl-objects/#supported-object-types","title":"Supported Object Types","text":"Object Type Description MCP Type System Root system information Resource Body Parliamentary bodies Resource/ResourceTemplate Organization Political parties, groups Resource/ResourceTemplate Person Elected officials, staff Resource/ResourceTemplate Meeting Scheduled meetings Resource/ResourceTemplate AgendaItem Meeting agenda items Resource/ResourceTemplate Paper Documents, resolutions Resource/ResourceTemplate Consultation Public consultations Resource/ResourceTemplate File Attachments and media Resource/ResourceTemplate Location Meeting venues Resource/ResourceTemplate"},{"location":"user-guide/oparl-objects/#object-properties","title":"Object Properties","text":""},{"location":"user-guide/oparl-objects/#system","title":"System","text":"<ul> <li><code>id</code>: Unique identifier</li> <li><code>type</code>: Object type identifier</li> <li><code>oparlVersion</code>: OParl version used</li> <li><code>body</code>: URL to bodies list</li> <li><code>name</code>: System name</li> <li><code>website</code>: System website</li> <li><code>contactEmail</code>: Contact email</li> <li><code>created</code>: Creation timestamp</li> <li><code>modified</code>: Last modification timestamp</li> </ul>"},{"location":"user-guide/oparl-objects/#body","title":"Body","text":"<ul> <li><code>id</code>: Unique identifier</li> <li><code>type</code>: Object type identifier</li> <li><code>system</code>: URL to system</li> <li><code>name</code>: Body name</li> <li><code>shortName</code>: Short name or abbreviation</li> <li><code>website</code>: Body website</li> <li><code>email</code>: Contact email</li> <li><code>organization</code>: URL to organizations list</li> <li><code>person</code>: URL to persons list</li> <li><code>meeting</code>: URL to meetings list</li> <li><code>paper</code>: URL to papers list</li> </ul>"},{"location":"user-guide/oparl-objects/#person","title":"Person","text":"<ul> <li><code>id</code>: Unique identifier</li> <li><code>type</code>: Object type identifier</li> <li><code>body</code>: URL to body</li> <li><code>name</code>: Full name</li> <li><code>familyName</code>: Family name</li> <li><code>givenName</code>: Given name</li> <li><code>title</code>: Academic or professional titles</li> <li><code>affiliation</code>: URLs to organizations</li> <li><code>email</code>: Email address</li> <li><code>phone</code>: Phone number</li> <li><code>status</code>: Person status</li> </ul>"},{"location":"user-guide/oparl-objects/#meeting","title":"Meeting","text":"<ul> <li><code>id</code>: Unique identifier</li> <li><code>type</code>: Object type identifier</li> <li><code>body</code>: URL to body</li> <li><code>name</code>: Meeting name</li> <li><code>meetingState</code>: State (scheduled, cancelled, took place)</li> <li><code>start</code>: Start time</li> <li><code>end</code>: End time</li> <li><code>location</code>: URL to location</li> <li><code>organization</code>: URLs to organizations</li> <li><code>participant</code>: URLs to participants</li> <li><code>agendaItem</code>: URL to agenda items list</li> </ul>"},{"location":"user-guide/oparl-objects/#data-relationships","title":"Data Relationships","text":"<pre><code>System\n\u251c\u2500\u2500 Body (multiple)\n\u2502   \u251c\u2500\u2500 Organization (multiple)\n\u2502   \u251c\u2500\u2500 Person (multiple)\n\u2502   \u251c\u2500\u2500 Meeting (multiple)\n\u2502   \u2502   \u2514\u2500\u2500 AgendaItem (multiple)\n\u2502   \u2514\u2500\u2500 Paper (multiple)\n\u2502       \u2514\u2500\u2500 File (multiple)\n\u2514\u2500\u2500 Location (multiple)\n</code></pre>"},{"location":"user-guide/oparl-objects/#access-patterns","title":"Access Patterns","text":""},{"location":"user-guide/oparl-objects/#hierarchical-access","title":"Hierarchical Access","text":"<ol> <li>Start with system information</li> <li>Get list of bodies</li> <li>Access specific body details</li> <li>Navigate to related objects</li> </ol>"},{"location":"user-guide/oparl-objects/#direct-access","title":"Direct Access","text":"<ul> <li>Use resource templates for direct object access</li> <li>Provide object ID for immediate access</li> <li>Useful for known object references</li> </ul>"},{"location":"user-guide/oparl-objects/#search-and-filter","title":"Search and Filter","text":"<ul> <li>Use tools for complex queries</li> <li>Filter by date ranges, keywords, types</li> <li>Combine multiple criteria for precise results</li> </ul>"},{"location":"user-guide/overview/","title":"User Guide Overview","text":"<p>Learn how to use OParl MCP Server effectively.</p>"},{"location":"user-guide/overview/#what-is-oparl-mcp-server","title":"What is OParl MCP Server?","text":"<p>OParl MCP Server is a Model Context Protocol (MCP) server that provides AI models with structured access to parliamentary information systems through the standardized OParl interface.</p>"},{"location":"user-guide/overview/#key-features","title":"Key Features","text":"<ul> <li>Complete OParl 1.1 Support: Access to all standard OParl object types</li> <li>MCP Integration: Seamless integration with AI models via Model Context Protocol</li> <li>Flexible Configuration: Support for multiple OParl implementations</li> <li>Authentication: Bearer token and API key support</li> <li>Docker Ready: Containerized deployment with Docker and Docker Compose</li> </ul>"},{"location":"user-guide/overview/#mcp-components","title":"MCP Components","text":""},{"location":"user-guide/overview/#resources","title":"Resources","text":"<ul> <li>System Information: Root system data and metadata</li> <li>Body Collections: Lists of parliamentary bodies</li> <li>Organization Data: Political parties and groups</li> <li>Person Profiles: Elected officials and staff</li> <li>Meeting Schedules: Upcoming and past meetings</li> <li>Document Collections: Papers and reports</li> <li>Agenda Items: Meeting topics and discussions</li> </ul>"},{"location":"user-guide/overview/#resource-templates","title":"Resource Templates","text":"<ul> <li>Individual meeting details</li> <li>Specific person profiles</li> <li>Organization details</li> <li>Document access</li> <li>Location information</li> </ul>"},{"location":"user-guide/overview/#tools","title":"Tools","text":"<ul> <li>Search operations</li> <li>Data filtering</li> <li>Export functionality</li> <li>Data validation</li> </ul>"},{"location":"user-guide/overview/#getting-started","title":"Getting Started","text":"<ol> <li>Installation</li> <li>Quick Start</li> <li>Configuration</li> </ol>"},{"location":"user-guide/overview/#next-steps","title":"Next Steps","text":"<ul> <li>MCP Components</li> <li>OParl Objects</li> <li>Examples</li> </ul>"}]}